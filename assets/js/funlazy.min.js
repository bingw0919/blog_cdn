const FunLazy2 = (function() {
            const defaults = {
                container: "body",
                effect: "show",
                placeholder: "data:img/jpg;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAMAAAAoyzS7AAAAA1BMVEXd3d3u346CAAAADUlEQVR42gECAP3/AAAAAgABUyucMAAAAABJRU5ErkJggg==",
                threshold: 0,
                width: null,
                height: null,
                axis: "y",
                eventType: "",
                autoCheckChange: false,
                useErrorImagePlaceholder: false,
                strictLazyMode: true,
                beforeLazy: function() {},
                onSuccess: function() {},
                onError: function() {}
            };

            function addFadeInStyle() {
                if (!document.getElementById('funlazy-fade-in-style')) {
                    const style = document.createElement('style');
                    style.id = 'funlazy-fade-in-style';
                    style.textContent = `
                        .funlazy-fadeIn {
                            animation: funlazy-fadeIn 400ms ease forwards;
                        }
                        @keyframes funlazy-fadeIn {
                            from { opacity: 0; }
                            to { opacity: 1; }
                        }
                    `;
                    document.head.appendChild(style);
                }
            }

            function isElementVisible(element) {
                if (!element || element === document.body) return true;

                const style = window.getComputedStyle(element);
                if (style.display === 'none' || style.visibility === 'hidden' || 
                    style.opacity === '0' || style.opacity === '0.0') {
                    return false;
                }

                return isElementVisible(element.parentNode);
            }

            function setElementSource(element, src, isImg) {
                if (isImg) {
                    element.src = src;
                } else {
                    element.style.backgroundImage = `url(${src})`;
                }
            }

            return function(userOptions) {
                const options = {...defaults, ...userOptions};

                addFadeInStyle();
    
                let container;
                if (options.container === window || 
                    options.container === document || 
                    options.container === 'html') {
                    container = document.body;
                } else if (typeof options.container === 'string') {
                    container = document.querySelector(options.container);
                } else {
                    container = options.container;
                }

                const lazyElements = container.querySelectorAll('[data-src]');

                function initLazyElement(element) {
                    if (element.funlazyLoaded || 
                        (options.strictLazyMode && !isElementVisible(element))) {
                        return;
                    }
                    
                    const src = element.getAttribute('data-src').trim();
                    if (!src) return;

                    const isImg = element.tagName.toLowerCase() === 'img';
 
                    setElementSource(element, options.placeholder, isImg);
    
                    if (options.width) {
                        element.style.width = typeof options.width === 'string' ? 
                            options.width : `${options.width}px`;
                    }
                    if (options.height) {
                        element.style.height = typeof options.height === 'string' ? 
                            options.height : `${options.height}px`;
                    }
                    
                    // 加载函数
                    function loadElement() {
                        if (element.funlazyLoaded) return;
      
                        const finalSrc = options.beforeLazy(src) || src;
                        
                        const img = new Image();
        
                        img.onload = function() {
                            setElementSource(element, finalSrc, isImg);
                   
                            if (options.effect === 'fadeIn') {
                                element.classList.add('funlazy-fadeIn');
                                setTimeout(() => {
                                    element.classList.remove('funlazy-fadeIn');
                                }, 400);
                            }
                            
                            if (!element.funlazyLoaded) {
                                options.onSuccess(element, finalSrc);
                            }
                            
                            element.funlazyLoaded = true;
                        };
  
                        img.onerror = function() {
                            if (!element.funlazyFailed) {
                                options.onError(element, finalSrc);
                            }
          
                            if (options.useErrorImagePlaceholder) {
                                setElementSource(element, options.placeholder, isImg);
                            }
                            
                            element.funlazyFailed = true;
                        };
                        
                        img.src = finalSrc;
                    }
                    
                    if (options.eventType && ['click', 'dblclick', 'mouseover'].includes(options.eventType)) {
                        element.addEventListener(options.eventType, function(e) {
                            if (e.target === element && !element.funlazyLoaded && !element.funlazyFailed) {
                                loadElement();
                            }
                        });
                    } 
                    // 使用 IntersectionObserver
                    else {
                        const threshold = Math.max(0, Math.min(1, options.threshold / 100)) || 0;
                        const rootMargin = options.axis === 'x' ? 
                            `0px ${options.threshold}px 0px 0px` : 
                            `${options.threshold}px 0px 0px 0px`;
                        
                        const observer = new IntersectionObserver((entries) => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    loadElement();
                                    observer.unobserve(entry.target);
                                }
                            });
                        }, {
                            root: container === document.body ? null : container,
                            threshold: threshold,
                            rootMargin: rootMargin
                        });
                        
                        observer.observe(element);
                    }
                }
                
                // 初始化所有元素
                lazyElements.forEach(initLazyElement);
                
                // 自动检测DOM变化
                if (options.autoCheckChange && typeof MutationObserver !== 'undefined') {
                    const observer = new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            mutation.addedNodes.forEach((node) => {
                                if (node.nodeType === 1) { // ELEMENT_NODE
                                    if (node.hasAttribute('data-src')) {
                                        initLazyElement(node);
                                    }
                                    
                                    const lazyElements = node.querySelectorAll('[data-src]');
                                    lazyElements.forEach(initLazyElement);
                                }
                            });
                        });
                    });
                    
                    observer.observe(container, {
                        childList: true,
                        subtree: true
                    });
                }

                return {
                    load: function(element) {
                        initLazyElement(element);
                    },
                    
                    loadAll: function() {
                        lazyElements.forEach(initLazyElement);
                    }
                };
            };
        })();